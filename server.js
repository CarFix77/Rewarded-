import { Application, Router } from "https://deno.land/x/oak/mod.ts";

const app = new Application();
const router = new Router();
const kv = await Deno.openKv();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  secretKey: "wagner4625",   // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è API
  rewardAmount: 0.0003,      // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ 1 –ø—Ä–æ—Å–º–æ—Ç—Ä
  dailyLimit: 30             // –õ–∏–º–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π/–¥–µ–Ω—å
};

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface User {
  userId: string;
  balance: number;
  lastRewardDate: string;
  todayViews: number;
}

// Reward endpoint
router.get("/reward", async (ctx) => {
  const params = ctx.request.url.searchParams;
  const userId = params.get("userid");
  const key = params.get("key");

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!userId || !key) {
    ctx.response.status = 400;
    return ctx.response.body = { 
      success: false, 
      error: "–ù—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: userid –∏ key" 
    };
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  if (key !== CONFIG.secretKey) {
    ctx.response.status = 401;
    return ctx.response.body = { 
      success: false, 
      error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á" 
    };
  }

  const today = new Date().toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
  const userKey = ["users", userId];

  // 3. –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = (await kv.get<User>(userKey)).value;
  if (!user) {
    user = {
      userId,
      balance: 0,
      lastRewardDate: today,
      todayViews: 0
    };
  }

  // 4. –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
  if (user.lastRewardDate !== today) {
    user.todayViews = 0;
    user.lastRewardDate = today;
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
  if (user.todayViews >= CONFIG.dailyLimit) {
    ctx.response.status = 429;
    return ctx.response.body = { 
      success: false, 
      error: `–õ–∏–º–∏—Ç ${CONFIG.dailyLimit} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–¥–µ–Ω—å –∏—Å—á–µ—Ä–ø–∞–Ω` 
    };
  }

  // 6. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
  user.balance = parseFloat((user.balance + CONFIG.rewardAmount).toFixed(6));
  user.todayViews++;

  // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  await kv.set(userKey, user);

  // 8. –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  ctx.response.body = {
    success: true,
    userId,
    reward: CONFIG.rewardAmount,
    balance: user.balance,
    viewsToday: user.todayViews,
    viewsRemaining: CONFIG.dailyLimit - user.todayViews
  };
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
router.get("/stats", async (ctx) => {
  const totalUsers = await countUsers();
  ctx.response.body = {
    totalUsers,
    rewardAmount: CONFIG.rewardAmount,
    dailyLimit: CONFIG.dailyLimit
  };
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function countUsers(): Promise<number> {
  const iter = kv.list({ prefix: ["users"] });
  let count = 0;
  for await (const _ of iter) count++;
  return count;
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use(router.routes());
app.use(router.allowedMethods());

console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:8000");
await app.listen({ port: 8000 });
