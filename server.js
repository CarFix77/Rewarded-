// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–µ—Ä–≤–µ—Ä —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
Deno.serve(async (req) => {
  const url = new URL(req.url);
  
  // –†–µ–¥–∏—Ä–µ–∫—Ç + –∑–∞–ø–∏—Å—å –≤ DB
  if (url.pathname === "/go") {
    const adUrl = url.searchParams.get("url");
    const userId = url.searchParams.get("user");
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ DB (–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å)
    await Deno.kv.set(["views", userId, Date.now()], adUrl);
    
    return Response.redirect(adUrl, 302);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö (GET /stats?user=123)
  if (url.pathname === "/stats") {
    const userId = url.searchParams.get("user");
    const entries = [];
    
    for await (const entry of Deno.kv.list(["views", userId])) {
      entries.push(entry.value);
    }
    
    return new Response(JSON.stringify(entries));
  }
  
  return new Response("AdRewards Server OK üöÄ");
});
